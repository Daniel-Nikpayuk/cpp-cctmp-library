/************************************************************************************************************************
**
** Copyright 2022-2024 Daniel Nikpayuk, Inuit Nunangat, The Inuit Nation
**
** This file is part of cpp_cctmp_library.
**
** cpp_cctmp_library is free software: you can redistribute it and/or modify it under the terms
** of the GNU General Public License as published by the Free Software Foundation, either version 3
** of the License, or (at your option) any later version.
**
** cpp_cctmp_library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
** without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
** See the GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License along with cpp_cctmp_library.
** If not, see <http://www.gnu.org/licenses/>.
**
************************************************************************************************************************/

// container:

namespace cctmp {

/***********************************************************************************************************************/
/***********************************************************************************************************************/
/***********************************************************************************************************************/

// environment:

/***********************************************************************************************************************/

// at:

	template<auto n, auto... filler>
	struct T_grammar<Shape::argument, Pattern::overload, ArgOverload::at, n, filler...>
	{
		template<typename... Ts>
		nik_ces auto result(Ts... vs)
		{
			nik_ce auto p0 = left_  <n, U_store_T<Ts>...>;
			nik_ce auto p1 = right_ <n, U_store_T<Ts>...>;
			nik_ce auto U  = _at_   <p0, p1>;

			return T_store_U<U>::result(vs...);
		}
	};

/***********************************************************************************************************************/

// lambda tuple:

	// make:

		template<auto... filler>
		struct T_grammar<Shape::argument, Pattern::lambda_tuple, ArgLambdaTuple::make, filler...>
		{
			template<typename... Ts>
			nik_ces auto result(Ts... vs)
			{
				return [vs...](auto p, auto U, auto... xs)
				{
					using F = T_restore_T<decltype(U)>;

					if (p) return F::template result<Ts..., decltype(xs)...>(vs..., xs...);
					else   return F::template result<decltype(xs)..., Ts...>(xs..., vs...);
				};
			}

		}; nik_ce auto _lambda_tuple_make_ = U_arg_lambda_tuple<ArgLambdaTuple::make>;

	// lmake:

		template<auto... filler>
		struct T_grammar<Shape::argument, Pattern::lambda_tuple, ArgLambdaTuple::lmake, filler...>
		{
			template<typename... Ts>
			nik_ces auto result(Ts... vs)
			{
				return [vs...](auto U, auto... xs)
				{
					using F = T_restore_T<decltype(U)>;

					return F::template result<Ts..., decltype(xs)...>(vs..., xs...);
				};
			}

		}; nik_ce auto _lambda_tuple_lmake_ = U_arg_lambda_tuple<ArgLambdaTuple::lmake>;

	// rmake:

		template<auto... filler>
		struct T_grammar<Shape::argument, Pattern::lambda_tuple, ArgLambdaTuple::rmake, filler...>
		{
			template<typename... Ts>
			nik_ces auto result(Ts... vs)
			{
				return [vs...](auto U, auto... xs)
				{
					using F = T_restore_T<decltype(U)>;

					return F::template result<decltype(xs)..., Ts...>(xs..., vs...);
				};
			}

		}; nik_ce auto _lambda_tuple_lmake_ = U_arg_lambda_tuple<ArgLambdaTuple::lmake>;

	// catenate:

	struct T_lambda_tuple_cat
	{
		template<typename LT, typename... Ts>
		nik_ces auto result(LT lt, Ts... vs) { return lt(_lambda_tuple_, vs...); }

	}; nik_ce auto _lambda_tuple_cat_ = U_store_T<T_lambda_tuple_cat>;

/***********************************************************************************************************************/

// lambda tuple:

	struct LambdaTuple
	{
		template<typename... Ts>
		nik_ces auto make(Ts... vs)
		{
			return [vs...](auto U, auto... xs)
			{
				using F = T_restore_T<decltype(U)>;

				return F::template result<Ts..., decltype(xs)...>(vs..., xs...);
			};
		}

		template<typename... Ts>
		nik_ces auto rmake(Ts... vs)
		{
			return [vs...](auto U, auto... xs)
			{
				using F = T_restore_T<decltype(U)>;

				return F::template result<decltype(xs)..., Ts...>(xs..., vs...);
			};
		}

		template<typename... Ts>
		nik_ces auto comake(Ts... vs)
		{
			return [vs...](bool p, auto U, auto... xs)
			{
				using F = T_restore_T<decltype(U)>;

				if (p) return F::template result<Ts..., decltype(xs)...>(vs..., xs...);
				else   return F::template result<decltype(xs)..., Ts...>(xs..., vs...);
			};
		}

		template<        typename LT> nik_ces auto empty(LT lt) { return lt(_empty_); }
		template<auto n, typename LT> nik_ces auto value(LT lt) { return lt(_at_<n>); }

		template<typename LT1, typename LT2>
		nik_ces auto cat(LT1 lt1, LT2 lt2) { return lt1(_lambda_tuple_cat_, lt2); }
	};

/***********************************************************************************************************************/

// binding:

/***********************************************************************************************************************/
/***********************************************************************************************************************/
/***********************************************************************************************************************/

} // namespace cctmp

